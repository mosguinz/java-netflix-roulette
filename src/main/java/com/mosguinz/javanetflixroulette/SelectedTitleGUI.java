/*
 * The MIT License
 *
 * Copyright 2019 mosguinz.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.mosguinz.javanetflixroulette;

import java.util.logging.Logger;
import java.util.logging.Level;

import java.net.URL;
import java.io.IOException;
import java.awt.Image;
import java.awt.Desktop;
import java.net.URISyntaxException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

import org.json.JSONObject;

/**
 * GUI for displaying the selected title.
 *
 * @author Mos
 */
public class SelectedTitleGUI extends javax.swing.JFrame {

    private static final Logger LOGGER = Logger.getLogger(SelectedTitleGUI.class.getName());

    String netflixID;
    String title;
    String imageURL;
    String synopsis;
    String rating;
    String type;
    String releaseYear;
    String runtime;

    /**
     * Creates new form SelectedTitleGUI
     */
    public SelectedTitleGUI() {
        initComponents();
        LoggingUtil.setupLogger(LOGGER);
        netflixID = title = imageURL = synopsis = rating = type = releaseYear = runtime = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePosterImage = new javax.swing.JLabel();
        titleSubtext = new javax.swing.JLabel();
        titleName = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        titleSynopsis = new javax.swing.JLabel();
        returnToMainButton = new javax.swing.JButton();
        watchOnNetflixButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titlePosterImage.setFont(new java.awt.Font("Helvetica Neue World", 1, 14)); // NOI18N
        titlePosterImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlePosterImage.setText("Title poster image");
        titlePosterImage.setPreferredSize(new java.awt.Dimension(166, 233));
        getContentPane().add(titlePosterImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        titleSubtext.setFont(new java.awt.Font("Helvetica Neue World", 0, 14)); // NOI18N
        titleSubtext.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        titleSubtext.setText("Year Â· runtime");
        getContentPane().add(titleSubtext, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, 420, 50));

        titleName.setFont(new java.awt.Font("Helvetica Neue World", 1, 24)); // NOI18N
        titleName.setText("Title name");
        titleName.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        getContentPane().add(titleName, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 410, 50));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 420, -1));

        titleSynopsis.setFont(new java.awt.Font("Helvetica Neue World", 0, 14)); // NOI18N
        titleSynopsis.setText("Title synopsis");
        titleSynopsis.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(titleSynopsis, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 420, 160));

        returnToMainButton.setText("Return to Main");
        returnToMainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToMainButtonActionPerformed(evt);
            }
        });
        getContentPane().add(returnToMainButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 260, -1, -1));

        watchOnNetflixButton.setText("Watch on Netflix");
        watchOnNetflixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchOnNetflixButtonActionPerformed(evt);
            }
        });
        getContentPane().add(watchOnNetflixButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 260, -1, -1));

        setSize(new java.awt.Dimension(663, 347));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Upon clicking "Return to Menu" button.
     * <p>
     * This will dispose the window.
     *
     * @param evt The action event
     */
    private void returnToMainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToMainButtonActionPerformed
        LOGGER.log(Level.FINE, "\"{0}\" button pressed\n{1}", new Object[]{evt.getActionCommand(), evt.paramString()});
        dispose();

    }//GEN-LAST:event_returnToMainButtonActionPerformed

    /**
     * Upon clicking "Watch on Netflix" button.
     * <p>
     * This will open the Netflix page of the current title on the system's
     * default browser.
     *
     * @param evt The action event
     */
    private void watchOnNetflixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchOnNetflixButtonActionPerformed
        LOGGER.log(Level.FINE, "\"{0}\" button pressed\n{1}", new Object[]{evt.getActionCommand(), evt.paramString()});

        LOGGER.log(Level.FINER, "Creating Netflix URL for title");
        String netflixURL = "https://www.netflix.com/title/" + netflixID;

        try {
            LOGGER.log(Level.FINE, "Opening URL in browser...");
            Desktop.getDesktop().browse(new URL(netflixURL).toURI());
        } catch (IOException | URISyntaxException e) {
            LoggingUtil.logException(LOGGER, e, "Something went wrong. Could not open broswer.");
        }
    }//GEN-LAST:event_watchOnNetflixButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException
                | InstantiationException
                | IllegalAccessException
                | javax.swing.UnsupportedLookAndFeelException ex) {
            LoggingUtil.logException(LOGGER, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SelectedTitleGUI().setVisible(true);
            }
        });
    }

    /**
     * Updates the attributes of the Netflix title to be displayed.
     *
     * @param selectedTitle a {@code JSONObject} of the selected title
     */
    public void updateTitleInfo(JSONObject selectedTitle) {

        netflixID = selectedTitle.getString("netflixid");
        title = selectedTitle.getString("title");
        imageURL = selectedTitle.getString("image");
        synopsis = selectedTitle.getString("synopsis");
        rating = selectedTitle.getString("rating");
        type = selectedTitle.getString("type");
        releaseYear = selectedTitle.getString("released");
        runtime = selectedTitle.getString("runtime");

        // Display poster image for selected title.
        setTitlePosterImage();
        setTitleInfo();
    }

    /**
     * Set the poster image of the title to be displayed.
     * <p>
     * The URL of the poster image is derived from the {@code JSONObject} of the
     * title.
     */
    private void setTitlePosterImage() {
        LOGGER.log(Level.FINE, "Adding poster image");

        LOGGER.log(Level.FINER, "Removing placeholder text");
        titlePosterImage.setText("");

        try {
            LOGGER.log(Level.FINE, "Fetching poster image from URL: {0}", imageURL);
            URL url = new URL(imageURL);
            Image image = ImageIO.read(url);
            titlePosterImage.setIcon(new ImageIcon(image));
            LOGGER.log(Level.FINE, "Poster image is set");
        } catch (IOException e) {
            LoggingUtil.logException(LOGGER, e, "Poster image could not be added, placing placeholder text instead...");
            titlePosterImage.setText("Image not available");
        }
    }

    /**
     * Set the title information to be displayed.
     * <p>
     * This includes: the title name, type (movie or series), runtime (for
     * movies), release year, and the synopsis.
     */
    private void setTitleInfo() {
        LOGGER.log(Level.FINE, "Creating selected title info element");

        LOGGER.log(Level.FINER, "Adding title name");
        titleName.setText("<html>" + title + "</html>");

        LOGGER.log(Level.FINER, "Creating subtext for selected title");
        String subtext = releaseYear;
        if (type.equals("movie")) {
            LOGGER.log(Level.FINER, "Title is a movie; adding runtime info to subtext");
            subtext += " Â· Movie Â· " + runtime;
        } else {
            subtext += " Â· Series";
        }

        LOGGER.log(Level.FINER, "Adding subtext");
        titleSubtext.setText(subtext);
        LOGGER.log(Level.FINER, "Adding synopsis");
        titleSynopsis.setText("<html><p style=\"line-height: 2%;\">" + synopsis + "</p></html>");

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton returnToMainButton;
    private javax.swing.JLabel titleName;
    private javax.swing.JLabel titlePosterImage;
    private javax.swing.JLabel titleSubtext;
    private javax.swing.JLabel titleSynopsis;
    private javax.swing.JButton watchOnNetflixButton;
    // End of variables declaration//GEN-END:variables
}
